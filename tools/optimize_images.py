#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∏–≥—Ä—ã:
1. –°–∂–∞—Ç–∏–µ PNG —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 80-85%
2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WebP (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
3. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
"""
import os
import sys
from pathlib import Path

def optimize_with_pngquant(assets_dir):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è PNG —á–µ—Ä–µ–∑ pngquant (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)"""
    import subprocess
    
    png_files = list(Path(assets_dir).glob("*.png"))
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(png_files)} PNG —Ñ–∞–π–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pngquant
    try:
        subprocess.run(["pngquant", "--version"], capture_output=True, check=True)
        has_pngquant = True
    except (subprocess.CalledProcessError, FileNotFoundError):
        has_pngquant = False
        print("‚ö†Ô∏è  pngquant –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install pngquant")
        return False
    
    if has_pngquant:
        for png_file in png_files:
            output = str(png_file).replace('.png', '-optimized.png')
            cmd = [
                "pngquant",
                "--quality=75-90",
                "--speed=1",
                "--force",
                "--output", output,
                str(png_file)
            ]
            try:
                subprocess.run(cmd, check=True, capture_output=True)
                # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
                os.replace(output, png_file)
                print(f"‚úÖ {png_file.name}")
            except subprocess.CalledProcessError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {png_file.name}: {e}")
        return True
    return False

def optimize_with_pillow(assets_dir):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è PNG —á–µ—Ä–µ–∑ Pillow"""
    try:
        from PIL import Image
    except ImportError:
        print("‚ö†Ô∏è  Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip3 install Pillow")
        return False
    
    png_files = list(Path(assets_dir).glob("*.png"))
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(png_files)} PNG —Ñ–∞–π–ª–æ–≤")
    
    for png_file in png_files:
        try:
            img = Image.open(png_file)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –µ—Å—Ç—å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
            if img.mode in ('RGBA', 'LA', 'P'):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è PNG
                img.save(png_file, "PNG", optimize=True, quality=85)
            else:
                img.save(png_file, "PNG", optimize=True)
            print(f"‚úÖ {png_file.name}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {png_file.name}: {e}")
    
    return True

def create_webp_versions(assets_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ WebP –≤–µ—Ä—Å–∏–π –¥–ª—è –≤—Å–µ—Ö PNG"""
    try:
        from PIL import Image
    except ImportError:
        print("‚ö†Ô∏è  Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è WebP –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        return False
    
    png_files = list(Path(assets_dir).glob("*.png"))
    print(f"\n–°–æ–∑–¥–∞–Ω–∏–µ WebP –≤–µ—Ä—Å–∏–π –¥–ª—è {len(png_files)} —Ñ–∞–π–ª–æ–≤...")
    
    for png_file in png_files:
        webp_file = png_file.with_suffix('.webp')
        try:
            img = Image.open(png_file)
            img.save(webp_file, "WEBP", quality=80, method=6)
            print(f"‚úÖ {webp_file.name}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {webp_file.name}: {e}")
    
    return True

if __name__ == "__main__":
    assets_dir = Path(__file__).parent.parent / "assets"
    
    if not assets_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {assets_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        sys.exit(1)
    
    print("üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º pngquant (–ª—É—á—à–µ–µ —Å–∂–∞—Ç–∏–µ)
    if not optimize_with_pngquant(assets_dir):
        # Fallback –Ω–∞ Pillow
        if not optimize_with_pillow(assets_dir):
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏–∏
    create_webp_versions(assets_dir)
    
    print("\n‚ú® –ì–æ—Ç–æ–≤–æ!")
